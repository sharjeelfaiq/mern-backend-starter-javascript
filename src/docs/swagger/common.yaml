openapi: 3.0.3
info:
  title: Shared API Components
  version: v1
  description: |
    Shared components library for consistent API design across all services.

    This file contains reusable schemas, responses, parameters, and security schemes
    used across multiple API endpoints to ensure consistency and maintainability.

components:
  schemas:
    # ================================
    # PRIMITIVE TYPES
    # ================================
    ID:
      type: string
      description: MongoDB ObjectId identifier
      example: "60d0fe4f5311236168a109ca"
      pattern: "^[0-9a-fA-F]{24}$"
      minLength: 24
      maxLength: 24

    Email:
      type: string
      format: email
      description: Valid email address (lowercase, trimmed)
      example: "user@example.com"
      maxLength: 255
      minLength: 5
      pattern: "^\\S+@\\S+\\.\\S+$"

    PhoneNumber:
      type: string
      description: Phone number in international format
      example: "+1234567890"
      pattern: "^\\+?[1-9]\\d{1,14}$"
      minLength: 10
      maxLength: 15

    Password:
      type: string
      format: password
      description: |
        Secure password with requirements:
        - Minimum 8 characters
        - At least one uppercase letter
        - At least one lowercase letter  
        - At least one number
        - At least one special character
      example: "SecurePass123!"
      minLength: 8
      maxLength: 128

    Role:
      type: string
      enum: [admin, organization, educator]
      description: |
        User role determining access permissions:
        - `admin`: Full system access
        - `organization`: Organization management
        - `educator`: Content creation and student management
      default: educator
      example: educator

    Token:
      type: string
      description: JWT authentication or verification token
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      minLength: 20

    OTPCode:
      type: string
      description: 6-digit numeric OTP code
      example: "123456"
      pattern: "^[0-9]{6}$"
      minLength: 6
      maxLength: 6

    Timestamp:
      type: string
      format: date-time
      description: ISO 8601 timestamp with timezone
      example: "2024-01-15T10:30:00.000Z"

    ProfilePictureUrl:
      type: string
      description: Relative URL path to uploaded avatar
      example: "/uploads/profile-picture-123.jpg"
      pattern: "^/uploads/[a-zA-Z0-9_-]+\\.(jpg|jpeg|png|gif)$"

    # ================================
    # RESPONSE STRUCTURES
    # ================================
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates if the operation completed successfully
        message:
          type: string
          description: Human-readable response message
          example: "Operation completed successfully"

    DataResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          required:
            - data
          properties:
            data:
              description: Response payload data
              example: {}

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          properties:
            success:
              example: false
            message:
              example: "An error occurred processing your request"

    # ================================
    # USER RELATED SCHEMAS
    # ================================
    UserProfile:
      type: object
      required:
        - _id
        - email
        - role
        - isEmailVerified
        - isPhoneVerified
        - createdAt
        - updatedAt
      properties:
        _id:
          $ref: "#/components/schemas/ID"
        email:
          $ref: "#/components/schemas/Email"
        phone:
          allOf:
            - $ref: "#/components/schemas/PhoneNumber"
          nullable: true
          description: Phone number (required for educators)
        role:
          $ref: "#/components/schemas/Role"
        isEmailVerified:
          type: boolean
          description: Email verification status
          example: true
        isPhoneVerified:
          type: boolean
          description: Phone verification status (required for educators)
          example: false
        avatar:
          allOf:
            - $ref: "#/components/schemas/ProfilePictureUrl"
          nullable: true
          description: Avatar URL
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        updatedAt:
          $ref: "#/components/schemas/Timestamp"

  # ================================
  # REUSABLE PARAMETERS
  # ================================
  parameters:
    UserIdPath:
      in: path
      name: id
      required: true
      description: MongoDB ObjectId of the user
      schema:
        $ref: "#/components/schemas/ID"

    VerificationTokenPath:
      in: path
      name: verificationToken
      required: true
      description: JWT verification token from email link
      schema:
        $ref: "#/components/schemas/Token"

    AuthorizationHeader:
      in: header
      name: Authorization
      required: true
      description: Bearer token from sign-in response
      schema:
        type: string
        example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  # ================================
  # SECURITY SCHEMES
  # ================================
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from the authentication sign-in endpoint.
        Include in the Authorization header as: `Bearer <token>`

  # ================================
  # REUSABLE RESPONSES
  # ================================
  responses:
    # Success Responses
    Success:
      description: Operation completed successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    SuccessWithData:
      description: Operation completed successfully with data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DataResponse"

    # Error Responses
    BadRequest:
      description: Invalid request data or business logic violation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            validationError:
              summary: Field validation failed
              value:
                success: false
                message: "Validation error occurred"

    Unauthorized:
      description: Authentication failed or invalid credentials
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            missingToken:
              summary: No authentication token provided
              value:
                success: false
                message: "Authentication token is required"
            invalidToken:
              summary: Token expired or malformed
              value:
                success: false
                message: "Invalid or expired token"

    Forbidden:
      description: Insufficient permissions for requested operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            insufficientPermissions:
              summary: User lacks required permissions
              value:
                success: false
                message: "Insufficient permissions"

    NotFound:
      description: Requested resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            resourceNotFound:
              summary: Resource not found
              value:
                success: false
                message: "Resource not found"

    InternalServerError:
      description: Unexpected server error occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            serverError:
              summary: Internal server error
              value:
                success: false
                message: "Internal server error occurred"
