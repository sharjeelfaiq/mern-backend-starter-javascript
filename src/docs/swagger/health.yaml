openapi: 3.0.3
info:
  title: Health Check API
  version: v1
  description: |
    System health monitoring and status reporting API for application infrastructure monitoring.

    **Health Status Levels:**
    - `healthy`: All systems operational (database connected, memory normal)
    - `degraded`: System operational with issues (database error or high memory)

    **Monitoring Components:**
    - Database connectivity and response time
    - Memory usage monitoring (threshold: 500MB)
    - Configuration validation for external services
    - Environment and system diagnostics

    **Use Cases:**
    - Load balancer health checks
    - Monitoring system integration
    - DevOps troubleshooting and diagnostics
    - Service uptime verification

  contact:
    name: API Support
    email: support@yourapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourapp.com
    description: Production server
  - url: https://romulus-backend-firy.onrender.com
    description: Staging server
  - url: http://localhost:5000
    description: Development server

tags:
  - name: Health
    description: System health monitoring and diagnostics

components:
  schemas:
    # ================================
    # HEALTH STATUS ENUMS
    # ================================
    HealthStatus:
      type: string
      enum: [healthy, degraded]
      description: |
        Overall system health status:
        - `healthy`: Database connected and memory usage normal
        - `degraded`: Database error or high memory usage
      example: healthy

    DatabaseStatus:
      type: string
      enum: [healthy, disconnected, error]
      description: |
        Database connection status:
        - `healthy`: Connected with successful ping
        - `disconnected`: No active database connection
        - `error`: Database ping failed
      example: healthy

    MemoryStatus:
      type: string
      enum: [normal, high]
      description: |
        Memory usage status:
        - `normal`: Memory usage under 500MB
        - `high`: Memory usage over 500MB threshold
      example: normal

    Environment:
      type: string
      enum: [Production, Development]
      description: Current deployment environment
      example: Development

    # ================================
    # BASIC HEALTH DATA SCHEMAS
    # ================================
    BasicHealthData:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          $ref: "#/components/schemas/HealthStatus"
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp in ISO 8601 format
          example: "2024-01-15T10:30:00.000Z"

    # ================================
    # DETAILED HEALTH DATA SCHEMAS
    # ================================
    DatabaseHealth:
      type: object
      required:
        - status
        - responseTime
      properties:
        status:
          $ref: "#/components/schemas/DatabaseStatus"
        responseTime:
          type: string
          nullable: true
          description: Database ping response time in milliseconds (null if disconnected/error)
          example: "45ms"
          pattern: "^\\d+ms$"

    MemoryHealth:
      type: object
      required:
        - usage
        - status
      properties:
        usage:
          type: string
          description: Current memory usage in megabytes
          example: "256MB"
          pattern: "^\\d+MB$"
        status:
          $ref: "#/components/schemas/MemoryStatus"

    UrlsConfig:
      type: object
      required:
        - backend
        - frontend
      properties:
        backend:
          type: string
          format: uri
          description: Backend base URL (environment-specific)
          example: "https://api.yourapp.com"
        frontend:
          type: string
          format: uri
          description: Frontend base URL (environment-specific)
          example: "https://yourapp.com"

    ConfigurationHealth:
      type: object
      required:
        - database
        - jwt
        - cloudinary
        - email
      properties:
        database:
          type: boolean
          description: Database URI configuration status
          example: true
        jwt:
          type: boolean
          description: JWT secret key configuration status
          example: true
        cloudinary:
          type: boolean
          description: Cloudinary service configuration status (cloud name, API key, API secret)
          example: true
        email:
          type: boolean
          description: Email service configuration status (user email and password)
          example: true

    DetailedHealthData:
      type: object
      required:
        - status
        - timestamp
        - responseTime
        - database
        - memory
        - environment
        - port
        - uptime
        - urls
        - configured
      properties:
        status:
          $ref: "#/components/schemas/HealthStatus"
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp in ISO 8601 format
          example: "2024-01-15T10:30:00.000Z"
        responseTime:
          type: string
          description: Total health check response time
          example: "15ms"
          pattern: "^\\d+ms$"
        database:
          $ref: "#/components/schemas/DatabaseHealth"
        memory:
          $ref: "#/components/schemas/MemoryHealth"
        environment:
          $ref: "#/components/schemas/Environment"
        port:
          type: string
          description: Application port number
          example: "5000"
        uptime:
          type: string
          description: System uptime in seconds
          example: "3600s"
          pattern: "^\\d+s$"
        urls:
          $ref: "#/components/schemas/UrlsConfig"
        configured:
          $ref: "#/components/schemas/ConfigurationHealth"

    # ================================
    # RESPONSE SCHEMAS
    # ================================
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates if the operation completed successfully
        message:
          type: string
          description: Human-readable response message
          example: "Operation completed successfully"

    BasicHealthResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/BasicHealthData"

    DetailedHealthResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/DetailedHealthData"

    # ================================
    # ERROR SCHEMAS
    # ================================
    ErrorResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
          example: "Authorization token missing or malformed."

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

paths:
  /health/public:
    get:
      summary: Check basic system health (public)
      description: |
        Performs basic health checks on system components and returns simplified status information.
        This endpoint is publicly accessible and does not require authentication.

        **Health Checks Performed:**
        - Database connectivity using mongoose ping
        - Memory usage monitoring (500MB threshold)

        **Health Logic:**
        - `healthy`: Database status is "healthy" AND memory status is "normal"
        - `degraded`: Database has errors/disconnected OR memory usage is high

        **Response:**
        Always returns HTTP 200 with health status in the response body.
      operationId: check-basic-system-health
      tags: [Health]
      responses:
        200:
          description: Basic system health status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicHealthResponse"
              examples:
                healthy:
                  summary: System is healthy
                  value:
                    success: true
                    message: "System operational"
                    data:
                      status: "healthy"
                      timestamp: "2024-01-15T10:30:00.000Z"
                degraded:
                  summary: System is degraded
                  value:
                    success: true
                    message: "System degraded"
                    data:
                      status: "degraded"
                      timestamp: "2024-01-15T10:30:00.000Z"
      x-internal: false
      x-monitoring: true

  /health/private:
    get:
      summary: Check detailed system health (private)
      description: |
        Performs comprehensive health checks on all system components and returns detailed status information.
        This endpoint requires authentication and provides extensive diagnostic information.

        **Health Checks Performed:**
        - Database connectivity using mongoose ping with response time
        - Memory usage monitoring (500MB threshold)
        - Configuration validation for external services
        - System uptime and environment information

        **Health Logic:**
        - `healthy`: Database status is "healthy" AND memory status is "normal"
        - `degraded`: Database has errors/disconnected OR memory usage is high

        **Response Codes:**
        - `200`: System is healthy (all checks passed)
        - `503`: System is degraded (at least one check failed)

        **Configuration Checks:**
        Validates presence of required environment variables:
        - `DATABASE_URI`: Database connection string
        - `JWT_SECRET_KEY`: JWT signing secret
        - `CLOUDINARY_*`: Cloud storage configuration (3 variables)
        - `USER_EMAIL` & `USER_PASSWORD`: Email service credentials

        **Environment URLs:**
        Returns appropriate URLs based on NODE_ENV:
        - **Production**: Uses PROD environment URLs
        - **Development/Other**: Uses DEV environment URLs
      operationId: check-detailed-system-health
      tags: [Health]
      security:
        - BearerAuth: []
      responses:
        200:
          description: System is healthy - all checks passed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedHealthResponse"
              example:
                success: true
                message: "System operational"
                data:
                  status: "healthy"
                  timestamp: "2024-01-15T10:30:00.000Z"
                  responseTime: "15ms"
                  database:
                    status: "healthy"
                    responseTime: "45ms"
                  memory:
                    usage: "256MB"
                    status: "normal"
                  environment: "Production"
                  port: "5000"
                  uptime: "3600s"
                  urls:
                    backend: "https://api.yourapp.com"
                    frontend: "https://yourapp.com"
                  configured:
                    database: true
                    jwt: true
                    cloudinary: true
                    email: true
        401:
          description: Authentication required - missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Authorization token missing or malformed."
        503:
          description: System is degraded - one or more checks failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedHealthResponse"
              examples:
                highMemory:
                  summary: High memory usage
                  value:
                    success: true
                    message: "System degraded"
                    data:
                      status: "degraded"
                      timestamp: "2024-01-15T10:30:00.000Z"
                      responseTime: "25ms"
                      database:
                        status: "healthy"
                        responseTime: "45ms"
                      memory:
                        usage: "550MB"
                        status: "high"
                      environment: "Production"
                      port: "5000"
                      uptime: "7200s"
                      urls:
                        backend: "https://api.yourapp.com"
                        frontend: "https://yourapp.com"
                      configured:
                        database: true
                        jwt: true
                        cloudinary: true
                        email: true
                databaseError:
                  summary: Database connection error
                  value:
                    success: true
                    message: "System degraded"
                    data:
                      status: "degraded"
                      timestamp: "2024-01-15T10:30:00.000Z"
                      responseTime: "50ms"
                      database:
                        status: "error"
                        responseTime: null
                      memory:
                        usage: "256MB"
                        status: "normal"
                      environment: "Production"
                      port: "5000"
                      uptime: "1800s"
                      urls:
                        backend: "https://api.yourapp.com"
                        frontend: "https://yourapp.com"
                      configured:
                        database: true
                        jwt: true
                        cloudinary: false
                        email: true
                databaseDisconnected:
                  summary: Database disconnected
                  value:
                    success: true
                    message: "System degraded"
                    data:
                      status: "degraded"
                      timestamp: "2024-01-15T10:30:00.000Z"
                      responseTime: "30ms"
                      database:
                        status: "disconnected"
                        responseTime: null
                      memory:
                        usage: "300MB"
                        status: "normal"
                      environment: "Development"
                      port: "5000"
                      uptime: "900s"
                      urls:
                        backend: "http://localhost:5000"
                        frontend: "http://localhost:3000"
                      configured:
                        database: true
                        jwt: true
                        cloudinary: true
                        email: true
      x-internal: false
      x-monitoring: true
