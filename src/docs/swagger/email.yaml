openapi: 3.0.3
info:
  title: Email Verification API
  version: v1
  description: |
    RESTful API for email verification and notification operations supporting user account activation.

    ## Overview
    This API provides endpoints for email verification during user registration and account activation processes.

    ## Key Features
    - JWT-based email verification tokens
    - Automatic user cleanup on verification failures
    - HTML email templates for verification
    - Verification notification pages

    ## Security Model
    - No authentication required (part of account activation flow)
    - Time-limited JWT tokens with user identification
    - Single-use verification tokens

    ## Integration Points
    - User Management API for user data operations
    - Nodemailer for email delivery
    - JWT for token generation and validation

  contact:
    name: API Support Team
    email: support@yourapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourapp.com
    description: Production server
  - url: https://romulus-backend-firy.onrender.com
    description: Staging server
  - url: http://localhost:5000
    description: Development server

tags:
  - name: Email Verification
    description: Email verification token management and validation

components:
  schemas:
    # ================================
    # PRIMITIVE TYPES
    # ================================
    Email:
      type: string
      format: email
      description: Valid email address (lowercase, trimmed)
      example: "user@example.com"
      maxLength: 255
      minLength: 5
      pattern: "^\\S+@\\S+\\.\\S+$"

    Token:
      type: string
      description: JWT authentication or verification token
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      minLength: 20

    # ================================
    # RESPONSE STRUCTURES
    # ================================
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates if the operation completed successfully
        message:
          type: string
          description: Human-readable response message
          example: "Operation completed successfully"

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          properties:
            success:
              example: false
            message:
              example: "An error occurred processing your request"

    # ================================
    # REQUEST SCHEMAS
    # ================================
    SendVerificationRequest:
      type: object
      required:
        - email
      properties:
        email:
          $ref: "#/components/schemas/Email"
      example:
        email: "user@example.com"

    # ================================
    # RESPONSE SCHEMAS
    # ================================
    HtmlResponse:
      type: string
      description: HTML page content for browser display
      example: |
        <!DOCTYPE html>
        <html>
          <body>
            <h1>Email Verified Successfully!</h1>
            <p>Your email has been verified. You can now <a href="https://yourapp.com/login">login</a>.</p>
          </body>
        </html>

  parameters:
    VerificationTokenQuery:
      in: query
      name: verificationToken
      required: true
      description: JWT verification token from email link
      schema:
        $ref: "#/components/schemas/Token"

  responses:
    # ================================
    # SUCCESS RESPONSES
    # ================================
    EmailVerificationSuccess:
      description: Email verified successfully
      content:
        text/html:
          schema:
            $ref: "#/components/schemas/HtmlResponse"

    # ================================
    # ERROR RESPONSES
    # ================================
    BadRequest:
      description: Invalid request data or malformed token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            invalidToken:
              summary: Token validation failed
              value:
                success: false
                message: "Invalid verification token"
            missingUserId:
              summary: Token missing userId field
              value:
                success: false
                message: "Token does not contain the user id"

    NotFound:
      description: User not found with token information
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            userNotFound:
              summary: User ID from token not found
              value:
                success: false
                message: "User not found"

    InternalServerError:
      description: Unexpected server error occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            verificationFailed:
              summary: Email verification update failed
              value:
                success: false
                message: "An error occurred while verifying the email"
            tokenGenerationFailed:
              summary: JWT generation failed
              value:
                success: false
                message: "An error occurred while generating the token."
            emailSendFailed:
              summary: Email delivery failed
              value:
                success: false
                message: "Failed to send the welcome email."
            verificationEmailSendFailed:
              summary: Verification notification email failed
              value:
                success: false
                message: "Failed to send the verification email."

paths:
  /api/v1/email/check-verification-token:
    get:
      tags:
        - Email Verification
      summary: Verify email address with token
      description: |
        Validates the email verification token and activates the user account.

        ## Process Flow
        1. Decodes and validates the JWT verification token from query parameter
        2. Extracts `id` from token payload
        3. Updates user's `isEmailVerified` status to `true`
        4. Sends verification notification email
        5. Returns HTML verification success page

        ## Token Requirements
        - Valid JWT format signed with system secret
        - Contains `id` field with valid MongoDB ObjectId
        - Must not be expired (10 minute expiration)

        ## Response Format
        Returns HTML content (not JSON) for browser display with login redirect link.
      operationId: check-verification-token
      parameters:
        - $ref: "#/components/parameters/VerificationTokenQuery"
      responses:
        200:
          $ref: "#/components/responses/EmailVerificationSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/email/send-verification-token:
    post:
      tags:
        - Email Verification
      summary: Send verification email
      description: |
        Sends a verification email containing a secure JWT token to the specified email address.

        ## Process Flow
        1. Validates that a user exists with the provided email
        2. Generates JWT verification token containing user ID (10 minute expiration)
        3. Sends HTML verification email via Nodemailer with subject "Welcome - Verify your email"
        4. Returns JSON success response

        ## Error Handling
        If token generation or email sending fails, the user account is automatically 
        deleted to prevent orphaned unverified accounts.

        ## Email Template
        Uses HTML template from `views/verification-email/index.html` with dynamic 
        token substitution.
      operationId: send-verification-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendVerificationRequest"
      responses:
        200:
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    example:
                      success: true
                      message: "Verification email sent successfully"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
