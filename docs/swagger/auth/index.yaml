openapi: 3.0.3
info:
  title: Authentication API
  version: v1
  description: |
    Comprehensive API for user authentication and account management.

    **Supported Roles:**
    - `admin`: Administrative privileges
    - `user`: Standard user access

    **Authentication Flow:**
    1. Register with email, password, and role
    2. Verify email address via sent verification link
    3. Sign in to receive JWT token
    4. Use token in Authorization header for protected endpoints

  contact:
    name: API Support
    email: support@yourapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourapp.com
    description: Production server
  - url: https://romulus-backend-firy.onrender.com
    description: Staging server
  - url: http://localhost:5000
    description: Development server

tags:
  - name: Authentication
    description: User authentication and account management

components:
  schemas:
    # ================================
    # PRIMITIVE TYPES
    # ================================
    UserID:
      type: string
      description: MongoDB ObjectId identifier for the user
      example: "60d0fe4f5311236168a109ca"
      pattern: "^[0-9a-fA-F]{24}$"
      minLength: 24
      maxLength: 24

    Email:
      type: string
      format: email
      description: Valid email address (lowercase, trimmed)
      example: "user@example.com"
      maxLength: 255
      minLength: 5
      pattern: "^\\S+@\\S+\\.\\S+$"

    Password:
      type: string
      format: password
      description: |
        Secure password with requirements:
        - Minimum 8 characters
        - Must contain at least one uppercase letter, one lowercase letter, one number, and one special character
      example: "SecurePass123!"
      minLength: 8
      maxLength: 128

    Role:
      type: string
      enum: [admin, user]
      description: |
        User role determining access permissions:
        - `admin`: Administrative privileges
        - `user`: Standard user access
      example: user

    Token:
      type: string
      description: JWT authentication or verification token
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      minLength: 20

    # ================================
    # RESPONSE STRUCTURES
    # ================================
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates if the operation completed successfully
        message:
          type: string
          description: Human-readable response message
          example: "Operation completed successfully"

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          properties:
            success:
              example: false
            message:
              example: "An error occurred processing your request"

    # ================================
    # REQUEST SCHEMAS
    # ================================
    SignUpRequest:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"
        role:
          $ref: "#/components/schemas/Role"
      example:
        email: "user@example.com"
        password: "SecurePass123!"
        role: "user"

    SignInRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"
      example:
        email: "user@example.com"
        password: "SecurePass123!"

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          $ref: "#/components/schemas/Email"
      example:
        email: "user@example.com"

    UpdatePasswordRequest:
      type: object
      required:
        - password
        - resetToken
      properties:
        password:
          $ref: "#/components/schemas/Password"
        resetToken:
          $ref: "#/components/schemas/Token"
      example:
        password: "NewSecurePass456!"
        resetToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # ================================
    # RESPONSE DATA SCHEMAS
    # ================================
    SignInResponseData:
      type: object
      required:
        - id
        - role
        - accessToken
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        role:
          $ref: "#/components/schemas/Role"
        accessToken:
          $ref: "#/components/schemas/Token"
      example:
        id: "60d0fe4f5311236168a109ca"
        role: "user"
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # ================================
    # RESPONSE SCHEMAS
    # ================================
    SignInResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/SignInResponseData"
          example:
            success: true
            message: "Signed in successfully."
            data:
              id: "60d0fe4f5311236168a109ca"
              role: "user"
              accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  responses:
    # ================================
    # SUCCESS RESPONSES
    # ================================
    SignUpSuccess:
      description: User account created successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"
          example:
            success: true
            message: "Signed up successfully. Please verify your email address."

    SignInSuccess:
      description: User authenticated successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignInResponse"

    # ================================
    # ERROR RESPONSES
    # ================================
    BadRequest:
      description: Invalid request data or business logic violation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            validationFailed:
              summary: Request validation failed
              value:
                success: false
                message: "Validation failed: Email is required, Password must be at least 8 characters long"
            emailExists:
              summary: Email already registered
              value:
                success: false
                message: "A user with this email already exists"
            tokenBlacklisted:
              summary: Token already blacklisted
              value:
                success: false
                message: "Token is already blacklisted"

    Unauthorized:
      description: Authentication failed or invalid credentials
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            invalidCredentials:
              summary: Wrong email or password
              value:
                success: false
                message: "Invalid credentials"
            tokenMissingOrMalformed:
              summary: Missing or malformed authorization token
              value:
                success: false
                message: "Authorization token missing or malformed"

    Forbidden:
      description: Account exists but verification requirements not met
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            emailNotVerified:
              summary: Email verification pending
              value:
                success: false
                message: "Email not verified. A new verification link has been sent to your inbox"

    NotFound:
      description: Requested resource does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            userNotFound:
              summary: No account with provided email
              value:
                success: false
                message: "User not found"

    InternalServerError:
      description: Unexpected server error occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            userCreationFailed:
              summary: User creation failed
              value:
                success: false
                message: "Failed to create a new user"
            tokenGenerationFailed:
              summary: Token generation failed
              value:
                success: false
                message: "An error occurred while generating the token"
            emailSendFailed:
              summary: Email sending failed
              value:
                success: false
                message: "Failed to send the welcome email"
            passwordUpdateFailed:
              summary: Password update failed
              value:
                success: false
                message: "Password update failed"
            tokenBlacklistFailed:
              summary: Token blacklist operation failed
              value:
                success: false
                message: "An error occurred while blacklisting the accessToken"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from the authentication sign-in endpoint.
        Include in the Authorization header as: `Bearer <token>`

paths:
  /api/v1/auth/signup:
    post:
      summary: Register new user account
      description: |
        Creates a new user account with email verification required.

        **Post-Registration Flow:**
        1. Email verification link sent to provided address
        2. User must complete email verification before signing in

        **Response:**
        Returns success message only. User data is not returned in signup response.

        **Error Handling:**
        - Email uniqueness is enforced
        - If user creation fails after sending email, appropriate error is returned
      operationId: sign-up
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
            examples:
              userRegistration:
                summary: User account registration
                value:
                  email: "user@example.com"
                  password: "SecurePass123!"
                  role: "user"
              adminRegistration:
                summary: Admin account registration
                value:
                  email: "admin@system.com"
                  password: "AdminPass789!"
                  role: "admin"
      responses:
        201:
          $ref: "#/components/responses/SignUpSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/auth/signin:
    post:
      summary: Authenticate user credentials
      description: |
        Validates user credentials and returns authentication token.

        **Prerequisites:**
        - Email must be verified for all roles

        **Response:**
        - JWT access token provided in response data
        - User ID and role included for client-side routing
        - For unverified emails: automatically sends new verification email before returning error

        **Token Information:**
        - Token expires in 1 hour (as per token configuration)
        - Token contains user ID and role for authorization
      operationId: sign-in
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
      responses:
        200:
          $ref: "#/components/responses/SignInSuccess"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/auth/signout:
    post:
      summary: Invalidate user session
      description: |
        Signs out the current user by invalidating their JWT token.

        **Authentication Required:**
        - Must provide valid JWT token in Authorization header
        - Token is validated via middleware before processing

        **Security:**
        - Token is added to blacklist to prevent reuse
        - Blacklisted tokens expire automatically after 1 hour
        - Returns error if token is already blacklisted

        **Implementation Notes:**
        - Token is extracted from Authorization header by removing "Bearer " prefix
        - Blacklist check performed before adding to prevent duplicate entries
      operationId: sign-out
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        200:
          description: User signed out successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
              example:
                success: true
                message: "Signed out successfully."
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/auth/request-password-reset:
    post:
      summary: Request password reset
      description: |
        Initiates password reset process for existing user.

        **Process:**
        1. Validates email exists in system
        2. Generates secure reset token (expires in 15 minutes)
        3. Sends reset link via email
        4. Returns success message only if user exists (security best practice)

        **Security:**
        - Only existing users receive reset emails
        - Returns 404 error if user email not found
        - Reset tokens have short expiration time
      operationId: request-password-reset
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        200:
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
              example:
                success: true
                message: "Reset password email sent successfully."
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /api/v1/auth/update-password:
    patch:
      summary: Reset password with token
      description: |
        Updates user password using reset token from email.

        **Security:**
        - Token validated for authenticity and expiration
        - New password must meet complexity requirements
        - Password immediately hashed and stored securely using bcrypt with salt
        - Reset token becomes invalid after use

        **Implementation:**
        - Uses bcrypt with salt rounds of 10 for password hashing
        - Updates user record with new hashed password
        - User ID extracted from decoded reset token
      operationId: update-password
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        200:
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
              example:
                success: true
                message: "Password updated successfully."
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
